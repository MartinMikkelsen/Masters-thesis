import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import os
from scipy.integrate import trapz
from scipy.integrate import quad
from scipy.optimize import root
from scipy.integrate import solve_bvp
from scipy.special import spherical_jn

from pylab import plt, mpl

mpl.rcParams['font.family'] = 'XCharter'
custom_params = {"axes.spines.right": True, "axes.spines.top": True}
sns.set_theme(style="ticks", rc=custom_params)
sns.set_context("talk")

PROJECT_ROOT_DIR = "Results"
FIGURE_ID = "Results/FigureFiles"
DATA_ID = "DataFiles/"

if not os.path.exists(PROJECT_ROOT_DIR):
    os.mkdir(PROJECT_ROOT_DIR)

if not os.path.exists(FIGURE_ID):
    os.makedirs(FIGURE_ID)

if not os.path.exists(DATA_ID):
    os.makedirs(DATA_ID)

def image_path(fig_id):
    return os.path.join(FIGURE_ID, fig_id)


def data_path(dat_id):
    return os.path.join(DATA_ID, dat_id)

def save_fig(fig_id):
    plt.savefig(image_path(fig_id) + ".pdf", format='pdf',bbox_inches="tight")

#This file is the raw data extracted from different papers. The papers are
#PhysRevLett.65.1841.pdf
#Genzel1974_Article_PhotoproductionOfNeutralPionsO.pdf
#Neutral-pion-photoproduction-from-the-proton-near-thres_1996_Physics-Letters.pdf
#PhysRevLett.57.3144.pdf
#Photoproduction-of-neutral-pions-on-hydrogen-at-photon-ener_1970_Nuclear-Phy.pdf
#These only consider pion photoproduction from a proton.

#The structure is as follows: variableNameOfFirstAuthor

gammaFuchs = np.array([145.31001589825118, 146.10492845786965, 146.97933227344993, 147.8060413354531, 148.93481717011127, 149.7933227344992, 150.82670906200318, 151.65341812400635, 152.4960254372019, 153.3227344992051])
sigmaFuchs = np.array([0.05611510791366906, 0.11330935251798561, 0.15971223021582734, 0.20503597122302158, 0.2870503597122302, 0.39172661870503594, 0.46402877697841727, 0.5924460431654676, 0.6787769784172661, 0.8028776978417266])
sigmaFuchsPoint = np.array([0.04964028776978417, 0.10251798561151079, 0.1510791366906475, 0.1910071942446043, 0.2719424460431655, 0.3755395683453237, 0.44676258992805756, 0.570863309352518, 0.6550359712230216, 0.7780575539568345])
errorFuchsmin = np.subtract(sigmaFuchs,sigmaFuchsPoint)
errorFuchsmax = errorFuchsmin
errorFuchs = [errorFuchsmin, errorFuchsmax]
plt.figure(figsize=(9,5.5))
plt.errorbar(gammaFuchs,sigmaFuchs,yerr=errorFuchs,fmt="o");
plt.xlabel(r"$E_\gamma$ [GeV]")
plt.ylabel(r"$\sigma$ [mb]")

gammaMazzucato = [146.5, 146.6, 147.5, 147.6, 148.5, 150.5, 152.4, 154.1, 154.6, 159.0, 167.1, 169.2]
sigmaMazzucato = [0.25, 0.30, 0.30, 0.20, 0.29, 0.52, 0.86, 1.34, 1.16, 2.44, 5.42, 6.01]
errorMazzucatomin = [0.12, 0.14, 0.09, 0.08, 0.07, 0.08, 0.12, 0.20, 0.16, 0.20, 0.34, 0.58]
errorMazzucatomax = errorMazzucatomin
errorMazzucato = [errorMazzucatomin, errorMazzucatomax]

plt.scatter(gammaMazzucato,sigmaMazzucato);
plt.errorbar(gammaMazzucato,sigmaMazzucato,yerr=errorMazzucato,fmt="o");
plt.xlabel(r"$E_\gamma$ [GeV]")
plt.ylabel(r"$\sigma$ [mb]")

gammaBergstrom = [141.55172413793105, 142.41379310344828, 143.27586206896552, 144.13793103448276, 145, 145.86206896551724, 146.72413793103448, 147.5287356321839, 148.39080459770116, 149.2528735632184, 150.05747126436782, 150.91954022988506, 151.66666666666666, 152.4712643678161, 153.27586206896552, 154.08045977011494, 154.88505747126436, 155.632183908046, 156.4367816091954, 157.29885057471265, 158.04597701149424, 158.85057471264366, 159.5977011494253, 160.3448275862069, 161.09195402298852, 161.89655172413794, 162.64367816091954, 163.44827586206895, 164.19540229885058]
sigmaBergstrom = [0.025684931506849314, 0.059931506849315065, 0.09417808219178081, 0.1626712328767123, 0.1797945205479452, 0.2568493150684931, 0.2868150684931507, 0.3553082191780822, 0.41952054794520544, 0.4708904109589041, 0.547945205479452, 0.6035958904109588, 0.6592465753424657, 0.7320205479452054, 0.8390410958904109, 0.9375, 1.0273972602739725, 1.1130136986301369, 1.2200342465753424, 1.3398972602739725, 1.4683219178082192, 1.5582191780821917, 1.6780821917808217, 1.7851027397260273, 1.9135273972602738, 2.033390410958904, 2.127568493150685, 2.281678082191781, 2.4529109589041096]
sigmaBergstromPoint = [0, 0.05565068493150685, 0.07705479452054795, 0.14126712328767121, 0.1583904109589041, 0.23972602739726026, 0.2696917808219178, 0.3467465753424657, 0.4066780821917808, 0.4537671232876712, 0.5308219178082192, 0.5821917808219178, 0.646404109589041, 0.7148972602739726, 0.821917808219178, 0.9160958904109588, 1.0059931506849316, 1.0873287671232876, 1.2029109589041096, 1.3142123287671232, 1.4426369863013697, 1.5368150684931505, 1.6481164383561644, 1.7508561643835616, 1.8835616438356164, 1.9991438356164382, 2.0976027397260273, 2.2517123287671232, 2.422945205479452]

sigmaBergstromErrorMin = np.subtract(sigmaBergstrom,sigmaBergstromPoint)
sigmaBergstromErrorMax = sigmaBergstromErrorMin
sigmaErrorBergstrom = [sigmaBergstromErrorMin, sigmaBergstromErrorMax]

plt.scatter(gammaBergstrom,sigmaBergstrom);
plt.errorbar(gammaBergstrom,sigmaBergstrom,yerr=sigmaErrorBergstrom,fmt="o");
plt.xlabel(r"$E_\gamma$ [GeV]")
plt.ylabel(r"$\sigma$ [mb]")

diffcrossAngleBecks = [11.356073211314477, 19.217970049916808, 27.371048252911816, 34.65058236272879, 42.803660565723796, 50.374376039933445, 58.23627287853578, 66.0981697171381, 73.96006655574044, 82.11314475873544, 89.6838602329451, 97.54575707154743, 105.40765391014976, 113.26955074875208, 121.13144758735442, 128.99334442595674, 137.14642262895177, 144.7171381031614, 152.57903494176372, 160.44093178036607, 168.59400998336108]
diffcrossBecks = [0.04642857142857143, 0.07976190476190477, 0.07678571428571429, 0.1005952380952381, 0.09464285714285715, 0.14642857142857144, 0.10833333333333334, 0.14047619047619048, 0.1267857142857143, 0.12202380952380953, 0.14583333333333334, 0.13273809523809524, 0.14821428571428572, 0.13630952380952382, 0.12916666666666668, 0.09166666666666667, 0.18214285714285716, 0.10476190476190478, 0.23750000000000002, 0.15833333333333335, 0.07440476190476192]
diffcrossErrorminBecks = [0.028571428571428574, 0.06071428571428572, 0.061309523809523814, 0.08452380952380953, 0.08154761904761905, 0.13095238095238096, 0.09642857142857143, 0.1285714285714286, 0.1142857142857143, 0.11011904761904763, 0.13392857142857145, 0.11964285714285715, 0.13333333333333336, 0.12142857142857144, 0.11250000000000002, 0.07678571428571429, 0.15714285714285717, 0.08154761904761905, 0.19464285714285717, 0.11190476190476191, 0.028571428571428574]
diffcrossErrormaxBecks = diffcrossErrorminBecks
errorBecks = [diffcrossErrorminBecks, diffcrossErrormaxBecks]

gammaSchmidt = [144.0358208955224, 145.07462686567163, 146.22089552238805, 147.40298507462686, 148.5134328358209, 149.69552238805971, 150.84179104477613, 151.95223880597015, 153.09850746268657, 154.2089552238806, 155.31940298507462, 156.53731343283582, 157.61194029850748, 158.79402985074626, 159.9044776119403, 161.01492537313433, 162.19701492537314, 163.30746268656716, 164.4179104477612, 165.6358208955224, 166.71044776119402, 167.82089552238807]
sigmaSchmidt = [0.0398406374501992, 0.049800796812749, 0.11952191235059761, 0.2290836653386454, 0.3286852589641434, 0.448207171314741, 0.5677290836653386, 0.7171314741035857, 0.9760956175298805, 1.155378486055777, 1.3545816733067728, 1.593625498007968, 1.7729083665338645, 2.1115537848605577, 2.290836653386454, 2.6095617529880477, 2.958167330677291, 3.197211155378486, 3.585657370517928, 3.9840637450199203, 4.282868525896414, 4.711155378486056]
sigmaSchmidtPiont = [0, 0, 0.059602649006622516, 0.1490066225165563, 0.24834437086092717, 0.3675496688741722, 0.4768211920529801, 0.6258278145695364, 0.8841059602649007, 1.0529801324503312, 1.2417218543046358, 1.4701986754966887, 1.6291390728476822, 1.947019867549669, 2.1357615894039736, 2.433774834437086, 2.76158940397351, 2.980132450331126, 3.3675496688741724, 3.7450331125827816, 4.052980132450331, 4.420529801324504]
errorSchmidtmin = np.subtract(sigmaFuchs,sigmaFuchsPoint)
errorSchmidtmax = errorSchmidtmin
sigmaErrorSchmidt = [errorSchmidtmin, errorSchmidtmax]

AngleBeckD = np.array([12.429057888762769, 20.601589103291712, 28.43359818388195, 36.43586833144154, 44.43813847900113, 52.61066969353008, 60.44267877412032, 68.27468785471055, 76.4472190692395, 84.4494892167991, 92.45175936435868, 100.45402951191828, 108.45629965947786, 116.2883087400681, 124.29057888762769, 132.2928490351873, 140.12485811577753, 148.1271282633371, 156.1293984108967, 164.30192962542566, 172.64472190692393])
DiffCrossBeckD = np.array([0.02443064182194617, 0.00679089026915114, 0.017556935817805385, 0.015569358178053832, 0.024679089026915117, 0.010683229813664596, 0.027329192546583853, 0.02915113871635611, 0.04380952380952381, 0.03428571428571429, 0.04571428571428572, 0.04008281573498965, 0.030227743271221536, 0.04339544513457557, 0.04207039337474121, 0.03643892339544514, 0.0339544513457557, 0.04132505175983437, 0.028571428571428574, 0.031138716356107665, 0.009772256728778468])
ErrD = [0.01184265010351967, 0.0014078674948240168, 0.010351966873706006, 0.009689440993788821, 0.018053830227743272, 0.006459627329192547, 0.0212008281573499, 0.022939958592132506, 0.03635610766045549, 0.027743271221532095, 0.038178053830227744, 0.03279503105590063, 0.02360248447204969, 0.03494824016563147, 0.03296066252587992, 0.027246376811594204, 0.023850931677018634, 0.028571428571428574, 0.016149068322981366, 0.015072463768115944, 0.02244306418219462]



AngleBeck = np.array([12.542955326460481, 20.61855670103093, 28.694158075601376, 36.597938144329895, 44.50171821305842, 52.40549828178694, 60.48109965635739, 68.21305841924399, 76.11683848797252, 84.02061855670104, 92.09621993127148, 100.34364261168385, 108.07560137457045, 116.1512027491409, 124.22680412371135, 132.3024054982818, 148.28178694158075, 156.18556701030928, 164.26116838487974])
DiffCrossBeck = np.array([0.009547738693467337, 0.022738693467336684, 0.033668341708542715, 0.03618090452261307, 0.019472361809045227, 0.05188442211055277, 0.04082914572864322, 0.06733668341708543, 0.05841708542713568, 0.0742462311557789, 0.0678391959798995, 0.05653266331658292, 0.07763819095477388, 0.05326633165829146, 0.05515075376884423, 0.05276381909547739, 0.028517587939698497, 0.04396984924623116, 0.03869346733668342])
Err = np.array([0.0023869346733668344, 0.013316582914572866, 0.023994974874371862, 0.02726130653266332, 0.013442211055276383, 0.042713567839195984, 0.0335427135678392, 0.05804020100502513, 0.050125628140703524, 0.06482412060301508, 0.05879396984924624, 0.047989949748743724, 0.06733668341708543, 0.04396984924623116, 0.04459798994974875, 0.04133165829145729, 0.017713567839195983, 0.027889447236180906, 0.019723618090452262])


AngleBeckB = np.array([12.06140350877193, 20.175438596491226, 28.07017543859649, 35.96491228070175, 44.07894736842105, 51.973684210526315, 59.868421052631575, 68.2017543859649, 76.09649122807018, 83.7719298245614, 91.8859649122807, 100, 107.89473684210526, 115.78947368421052, 124.12280701754385, 132.01754385964912, 140.1315789473684, 147.80701754385964, 156.140350877193, 164.25438596491227])
DiffCrossBeckB = np.array([0.019025522041763342, 0.05359628770301624, 0.056380510440835266, 0.0642691415313225, 0.08445475638051043, 0.08329466357308585, 0.10208816705336426, 0.07378190255220418, 0.09466357308584687, 0.11693735498839908, 0.07424593967517401, 0.05916473317865429, 0.08607888631090488, 0.08468677494199536, 0.06194895591647332, 0.09466357308584687, 0.060556844547563805, 0.11670533642691415, 0.05568445475638051, 0.06960556844547564])
ErrB = np.array([0.006728538283062645, 0.0382830626450116, 0.042923433874709975, 0.05174013921113689, 0.07169373549883991, 0.07169373549883991, 0.09025522041763341, 0.06403712296983759, 0.08375870069605569, 0.10510440835266821, 0.0642691415313225, 0.05034802784222738, 0.07470997679814385, 0.07262180974477958, 0.050580046403712296, 0.07888631090487239, 0.04617169373549884, 0.09234338747099768, 0.035498839907192575, 0.041299303944315545])
